---
// src/pages/[id]/[slug].astro

import Layout from '../../layouts/BaseLayout.astro';
import VideoCard from '../../components/VideoCard.astro';
import { getAllVideos, type VideoData } from '../../utils/data';
import { slugify } from '../../utils/slugify';
import { nama, url } from '../../utils/site.ts'; // Mengambil nama, desk, url situs

export const prerender = true;

export async function getStaticPaths() {
  const allVideos: VideoData[] = await getAllVideos();
  return allVideos.map(video => ({
    params: { id: video.id, slug: slugify(video.title) },
    props: { video, allVideos },
  }));
}

const { video, allVideos } = Astro.props;

// --- LOGIKA UNTUK VIDEO TERKAIT (CATEGORY & TAGS) ---
const numberOfRelatedVideos = 15; // Jumlah total video terkait yang diinginkan
const relatedVideos: VideoData[] = [];

// Strategi 1: Video dengan kategori yang sama
const sameCategoryVideos = allVideos.filter(v =>
  v.category === video.category && v.id !== video.id
);
for (const v of sameCategoryVideos) {
  if (relatedVideos.length < numberOfRelatedVideos) {
    relatedVideos.push(v);
  } else {
    break;
  }
}

// Strategi 2: Video dengan tag yang cocok (jika masih kurang)
const videoTagsForSearch = typeof video.tags === 'string'
    ? video.tags.split(',').map(tag => tag.trim().toLowerCase())
    : [];

if (relatedVideos.length < numberOfRelatedVideos && videoTagsForSearch.length > 0) {
  const tagMatchedVideos = allVideos.filter(v =>
    v.id !== video.id &&
    !relatedVideos.some(rv => rv.id === v.id) && // Hindari duplikasi dengan yang sudah ada
    typeof v.tags === 'string' && v.tags.split(',').map(tag => tag.trim().toLowerCase()).some(tag => videoTagsForSearch.includes(tag))
  );

  for (const v of tagMatchedVideos) {
    if (relatedVideos.length < numberOfRelatedVideos) {
      relatedVideos.push(v);
    } else {
      break;
    }
  }
}

// Strategi 3: Jika masih kurang, ambil acak dari semua video (fallback) untuk related
if (relatedVideos.length < numberOfRelatedVideos) {
  const remainingSlots = numberOfRelatedVideos - relatedVideos.length;
  const otherVideosForRelated = allVideos.filter(v =>
    v.id !== video.id &&
    !relatedVideos.some(rv => rv.id === v.id)
  );
  const shuffledOthersForRelated = otherVideosForRelated.sort(() => 0.5 - Math.random());
  relatedVideos.push(...shuffledOthersForRelated.slice(0, remainingSlots));
}

// Acak kembali relatedVideos untuk memastikan variasi dalam urutan
relatedVideos.sort(() => 0.5 - Math.random());


// --- LOGIKA BARU UNTUK VIDEO ACAK (DIFFERENT SECTION) ---
const numberOfRandomVideos = 15; // Jumlah video acak yang ingin ditampilkan di bagian terpisah

// Dapatkan ID dari video saat ini dan semua video terkait
const currentAndRelatedVideoIds = new Set([video.id, ...relatedVideos.map(v => v.id)]);

// Filter video yang tidak sedang ditonton dan tidak ada di daftar video terkait
const videosForRandomSelection = allVideos.filter(v => !currentAndRelatedVideoIds.has(v.id));

// Acak array dan ambil sejumlah video yang diinginkan
const randomVideos = videosForRandomSelection
  .sort(() => 0.5 - Math.random()) // Acak array
  .slice(0, numberOfRandomVideos); // Ambil sejumlah yang dibutuhkan


// Mendapatkan domain unik dari URL thumbnail dan embedUrl untuk preconnect
const allDomains = new Set<string>();
try {
  if (video.thumbnail) allDomains.add(new URL(video.thumbnail).origin);
  if (video.embedUrl) allDomains.add(new URL(video.embedUrl).origin);
} catch (e) {
  console.error(`[ERROR] URL thumbnail/video tidak valid untuk video ID ${video.id} (current video):`, e);
}

// Periksa relatedVideos
relatedVideos.forEach(v => {
  try {
    if (v.thumbnail) allDomains.add(new URL(v.thumbnail).origin);
    if (v.embedUrl) allDomains.add(new URL(v.embedUrl).origin);
  } catch (e) {
    console.error(`[ERROR] URL thumbnail/video tidak valid untuk video ID ${v.id} (related video):`, e);
  }
});

// Periksa randomVideos (yang baru)
randomVideos.forEach(v => {
  try {
    if (v.thumbnail) allDomains.add(new URL(v.thumbnail).origin);
    if (v.embedUrl) allDomains.add(new URL(v.embedUrl).origin);
  } catch (e) {
    console.error(`[ERROR] URL thumbnail/video tidak valid untuk video ID ${v.id} (random video):`, e);
  }
});


const preconnectDomains = Array.from(allDomains);

const breadcrumbs = [
  { name: 'Home', url: '/' },
  { name: video.category, url: `/category/${slugify(video.category)}/1` },
  { name: video.title },
];

// === MODIFIKASI UTAMA DI SINI ===
// Konversi string video.tags menjadi array untuk ditampilkan
const displayTags = typeof video.tags === 'string'
    ? video.tags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0)
    : [];

// --- Tambahkan logika untuk tanggal (jika ada di data video Anda) ---
// Asumsi: video.datePublished dan video.dateModified tersedia dan dalam format yang valid (e.g., ISO 8601)
// Jika tidak, Anda mungkin perlu menambahkan properti ini ke data video Anda atau menggunakan tanggal statis.
const datePublished = video.datePublished || '2023-01-01T00:00:00Z'; // Ganti dengan tanggal sebenarnya
const dateModified = video.dateModified || new Date().toISOString(); // Ganti dengan tanggal update terakhir atau current date


---

<Layout
  title={`${video.title} - ${nama}`}
  description={video.description}
  preconnectDomains={preconnectDomains}
  siteName={nama}
  siteUrl={url}
>
  {/* Schema untuk WebPage (mewakili halaman secara keseluruhan) */}
  <div itemscope itemtype="http://schema.org/WebPage">
    <meta itemprop="url" content={`${url}/${video.id}/${slugify(video.title)}`} />
    <meta itemprop="name" content={`${video.title} - ${nama}`} />
    <meta itemprop="description" content={video.description} />
    {/* Schema Publisher / Author */}
    <div itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content={nama} />
      {/* Jika Anda memiliki logo, tambahkan di sini */}
      {/* <div itemprop="logo" itemscope itemtype="http://schema.org/ImageObject">
        <meta itemprop="url" content={`${url}/path/to/your/logo.png`} />
        <meta itemprop="width" content="600" />
        <meta itemprop="height" content="60" />
      </div> */}
    </div>
    {/* Tanggal publikasi dan modifikasi halaman */}
    <meta itemprop="datePublished" content={datePublished} />
    <meta itemprop="dateModified" content={dateModified} />

  <main class="video-detail-page">
    <nav class="breadcrumb" aria-label="breadcrumb" itemscope itemtype="http://schema.org/BreadcrumbList">
      <ol>
        {breadcrumbs.map((item, index) => (
          <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
            {index > 0 && <span class="separator">/</span>}
            {item.url ? (
              <a itemprop="item" href={item.url}>
                <span itemprop="name">{item.name}</span>
              </a>
            ) : (
              <span itemprop="name">{item.name}</span>
            )}
            <meta itemprop="position" content={(index + 1).toString()} />
          </li>
        ))}
      </ol>
    </nav>

    {/* Schema untuk VideoObject */}
    <div class="video-player-container" itemscope itemtype="http://schema.org/VideoObject">
      <meta itemprop="name" content={video.title} />
      <meta itemprop="description" content={video.description} />
      <meta itemprop="uploadDate" content={datePublished} /> {/* Gunakan tanggal publikasi video */}
      <meta itemprop="embedUrl" content={video.embedUrl} />
      <meta itemprop="thumbnailUrl" content={video.thumbnail} />
      {/* Tambahkan properti opsional lainnya jika tersedia dalam data video Anda */}
      {/* <meta itemprop="duration" content="PT1M33S" /> Â Misalnya, durasi video dalam format ISO 8601 */}
      {/* <meta itemprop="interactionCount" content="5000" /> Contoh jumlah tayang */}
      <meta itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
        <meta itemprop="name" content={nama} />
      </meta>

      <iframe
        src={video.embedUrl}
        frameborder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
        allowfullscreen
        loading="eager"
        width="100%"
        height="300"
        title={video.title}
      ></iframe>
    </div>
    <h1 class="video-title" itemprop="headline">{video.title}</h1>
<script type="text/javascript" src="https://js.juicyads.com/jp.php?c=947403z2v256s2x2w2e4z2e4&u=https%3A%2F%2Fwww.juicyads.rocks"></script>
<script type="text/javascript">
var juicy_tags = ['a', 'img'];
</script>
<script type="text/javascript" src="https://js.juicyads.com/jp.php?c=947403z2v256s2x2w2e4z2e4&u=https%3A%2F%2Fwww.juicyads.rocks"></script>
      <div class="juicyads-ad-container" style="min-height: 300px; width: 100%; display: flex; justify-content: center; align-items: center; background-color: var(--card-bg); border-radius: var(--border-radius-medium); margin-bottom: var(--spacing-unit);">
<script type="text/javascript" data-cfasync="false" async src="https://poweredby.jads.co/js/jads.js"></script>
<ins id="1055940" data-width="308" data-height="298"></ins>
<script type="text/javascript" data-cfasync="false" async>(adsbyjuicy = window.adsbyjuicy || []).push({'adzone':1055940});</script>
      </div>
    <p class="video-description" itemprop="articleBody">{video.description}
    {/* === PENGGUNAAN displayTags DI SINI === */}
    {displayTags.length > 0 && (
      <div class="video-tags-container">
        <h2>Tags:</h2>
        <div class="tags-list">
          {displayTags.map(tag => (
            <a href={`/cari/${slugify(tag)}`} class="tag-item">{tag}</a>
          ))}
        </div>
      </div>
    )}

    {relatedVideos.length > 0 && (
      <section class="related-videos-section">
        <h2 class="section-title">Video Terkait {video.title}</h2>

        <div class="video-grid">
          {relatedVideos.map((relatedVideo) => (
            <VideoCard video={relatedVideo} videoDetailPath={`/${relatedVideo.id}/${slugify(relatedVideo.title)}`} />
          ))}
        </div>
      </section>
    )}

    {/* --- SEKSI BARU UNTUK VIDEO ACAK --- */}
    {randomVideos.length > 0 && (
      <section class="random-videos-section">
      <div class="juicyads-ad-container" style="min-height: 300px; width: 100%; display: flex; justify-content: center; align-items: center; background-color: var(--card-bg); border-radius: var(--border-radius-medium); margin-bottom: var(--spacing-unit);">
<script type="text/javascript" data-cfasync="false" async src="https://poweredby.jads.co/js/jads.js"></script>
<ins id="1055940" data-width="308" data-height="298"></ins>
<script type="text/javascript" data-cfasync="false" async>(adsbyjuicy = window.adsbyjuicy || []).push({'adzone':1055940});</script>
      </div>
        <h2 class="section-title">Video Pilihan</h2>
        <div class="video-grid">
          {randomVideos.map((randomVideo) => (
            <VideoCard video={randomVideo} videoDetailPath={`/${randomVideo.id}/${slugify(randomVideo.title)}`} />
          ))}
        </div>
      </section>
    )}
</p>
  </main>
  </div>
</Layout>
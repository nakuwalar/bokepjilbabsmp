---
export const prerender = true;

import Layout from '../../layouts/Layout.astro';
import VideoCard from '../../components/VideoCard.astro';
import videosData from '../../data/videos.json';
import { slugify } from '../../utils/slugify';

interface Video {
  id: string;
  title: string;
  description: string;
  category: string;
  thumbnail: string;
  embedUrl: string;
  tags: string;
  slug?: string;
}

export async function getStaticPaths() {
  const generatedPaths: { params: { slug: string }, props: { video: Video } }[] = [];
  const existingSlugs = new Set<string>();

  for (const video of videosData) {
    const videoSlug = video.slug
      ? slugify(video.slug, Array.from(existingSlugs))
      : slugify(video.title, Array.from(existingSlugs));

    existingSlugs.add(videoSlug);

    generatedPaths.push({
      params: { slug: videoSlug },
      props: { video }
    });
  }

  return generatedPaths;
}

const { video } = Astro.props as { video: Video };

if (!video) {
  return Astro.redirect('/404');
}

const siteBaseUrl = Astro.site;
const videoUploadDate = new Date().toISOString().split('T')[0];
const categorySlug = encodeURIComponent(video.category.toLowerCase().replace(/\s+/g, '-'));

const relatedVideos = videosData.filter(
  (v: Video) => v.category === video.category && v.id !== video.id
);

const shuffledRelatedVideos = relatedVideos.sort(() => 0.5 - Math.random());
const videosToShow = shuffledRelatedVideos.slice(0, 20);

---

<Layout
  title={video.title}
  description={video.description}
  image={video.thumbnail}
>
  <article class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 lg:p-8 mb-8">
    <h1 class="text-4xl font-bold mb-4 text-gray-900 dark:text-white">{video.title}</h1>

    <div class="text-gray-600 dark:text-gray-400 text-lg mb-6">
      Kategori:
      <a
        href={`/category/${categorySlug}/`}
        class="text-blue-600 dark:text-blue-400 hover:underline ml-1"
      >
        {video.category}
      </a>
    </div>

    <div class="relative w-full overflow-hidden mb-8 rounded-lg" style="padding-top: 56.25%">
      <iframe
        class="absolute top-0 left-0 w-full h-full"
        src={video.embedUrl}
        frameborder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
        allowfullscreen
        title={video.title}
        loading="lazy"
      ></iframe>
    </div>

    <div class="prose dark:prose-invert max-w-none">
      <h2 class="text-2xl font-semibold mb-4 text-gray-900 dark:text-white">Deskripsi Video</h2>
      <p class="text-gray-700 dark:text-gray-300 leading-relaxed">{video.description}</p>
    </div>

    <script type="application/ld+json" set:html={`
      {
        "@context": "https://schema.org",
        "@type": "VideoObject",
        "name": "${video.title}",
        "description": "${video.description}",
        "thumbnailUrl": "${new URL(video.thumbnail, siteBaseUrl).href}",
        "uploadDate": "${videoUploadDate}",
        "embedUrl": "${video.embedUrl}",
        "publisher": {
          "@type": "Organization",
          "name": "Astro Video",
          "logo": {
            "@type": "ImageObject",
            "url": "${new URL('/favicon.svg', siteBaseUrl).href}",
            "width": 60,
            "height": 60
          }
        },
        "contentUrl": "${video.embedUrl}"
      }
    `} />
  </article>

  {videosToShow.length > 0 && (
    <section class="mt-8">
      <h2 class="text-3xl font-bold mb-6 text-gray-900 dark:text-white text-center">Video Terkait</h2>
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
        {videosToShow.map((relatedVideo: Video) => (
          <VideoCard {...relatedVideo} />
        ))}
      </div>
    </section>
  )}
</Layout>